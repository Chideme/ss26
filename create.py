import os
from flask import Flask,render_template, request
from models import *
from werkzeug.security import generate_password_hash
from sqlalchemy import create_engine,MetaData

#DATABASE_URL ="postgres://vyltpsivhqeaun:c0bb13175e810c1dcb143e03d1dc47b2ebaf46e095d9d6dfc8979d19f6a48e14@ec2-50-16-197-244.compute-1.amazonaws.com:5432/d3ud9s5a665gva"
#DATABASE_URL= "postgres://localhost/ss26"  
app = Flask(__name__)
app.config["SQLALCHEMY_DATABASE_URI"] =os.getenv("DATABASE_URL")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db.init_app(app)

def main():

    #db.create_all()
     ## Insert management data
    password = generate_password_hash("Kud@94")
    op.bulk_insert(system_table,
    [
        {'name':'Admin','password':password}
    ],
     multiinsert=False)

    op.bulk_insert(packages_table,
    [
        {'name':'free','number_of_days':7},
        {'name':'monthly','number_of_days':30},
        {'name':'yearly','number_of_days':365}
    ],
     multiinsert=False)

   

    op.bulk_insert(roles_table,
    [
        {'name':'admin'},
        {'name':'supervisor'},
        {'name':'view-only'}
    ],
     multiinsert=False)
    # 
    ######
    def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    schemas = conn.execute("SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT IN ('information_schema', 'pg_catalog','pg_toast', 'pg_temp_1', 'pg_toast_temp_1','public')").fetchall()
    schemas = [ str(x[0]) for x in schemas]
    for schema in schemas:
        print("Executing on schema {}".format(schema))
        op.execute("SET search_path TO {}".format(schema))
        op.add_column('coupons',sa.Column('account_id', sa.Integer(),nullable=True))
        op.create_foreign_key('coupons_account_fkey', 'coupons', 'account', ['account_id'], ['id'])
        op.execute(text("SET search_path TO default"))
    op.execute(text("SET search_path TO default"))

    for schema in schemas:
        print("Executing on schema {}".format(schema))
        op.execute("SET search_path TO {}".format(schema))
        op.add_column('journals',sa.Column('updated', sa.Boolean() ,nullable=True))
        op.execute("UPDATE journals SET updated = False")
        op.alter_column('journals',sa.Column('updated',nullable=False))
        op.create_table('ledger',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('date', sa.Date(), nullable=False),
            sa.Column('account_id', sa.Integer(), nullable=False),
            sa.Column('journal_id', sa.Integer(), nullable=False),
            sa.Column('txn_type', sa.String(), nullable=False),
            sa.Column('amount', sa.Float(), nullable=False),
            sa.Column('post_balance', sa.Float(), nullable=False),
            sa.Column('updated_on', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
            sa.ForeignKeyConstraint(['journal_id'], ['journals.id'], ),
            sa.PrimaryKeyConstraint('id')
            )
        op.execute("SET search_path TO default")
    op.execute("SET search_path TO default")
   
if __name__=="__main__":
    with app.app_context():
        main()